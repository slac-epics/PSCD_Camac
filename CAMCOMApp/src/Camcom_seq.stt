program Camcom

option -c;
option -r;

%%#include "epicsTime.h"
%%#include "epicsThread.h"
%%#include "epicsPrint.h" /* epicsPrintf */
%%#include "string.h"     /* memcpy, memset */

%%static char* comp_date = __DATE__; /* 12 characters long */
%%static char* comp_comment = "Version 1.0"; 

%%#define CAMCOM_FREE 0
%%#define CAMCOM_TAKEN 1
%%#define CAMCOM_HOST_DONE 2
%%#define CAMCOM_BUSY 3
%%#define CAMCOM_DONE 4

short active_token; assign active_token to "{BR}:CAMCOM:ACTIVE_TOKEN";
monitor active_token;

short last_active_token;

short in_buff_len; assign in_buff_len to "CAMC:{LOCA}:CV01:INBUFF_LEN";

char real_buff[16348]; assign real_buff to "CAMC:{LOCA}:CV01:REALBUFF";

char in_buff[16348]; assign in_buff to "CAMC:{LOCA}:CV01:INBUFF";

short token_valid; assign token_valid to "CAMC:{LOCA}:CV01:TOKEN_VALID";
monitor token_valid;

short camcom_status; assign camcom_status to "CAMC:{LOCA}:CV01:STATUS";
monitor camcom_status;

string camcom_reservation; assign camcom_reservation to "CAMC:{LOCA}:CV01:NOTE";

string camcom_seq_ver; assign camcom_seq_ver to "CAMC:{LOCA}:CV01:SEQ:VER";

ss DOcamcom {
    state init {
	when (1) {
          sprintf(camcom_seq_ver,"%s : %s",comp_date,comp_comment);
          pvPut(camcom_seq_ver);
          camcom_status=CAMCOM_FREE; pvPut(camcom_status);
          last_active_token = -1;
	} state process
    }

    state process {
        when (camcom_status==CAMCOM_TAKEN && last_active_token!=active_token) {
            last_active_token=active_token;
         } state process

        when (camcom_status==CAMCOM_FREE && last_active_token == active_token) {
            last_active_token--;
        } state process

        when (camcom_status==CAMCOM_HOST_DONE) {
            camcom_status=CAMCOM_BUSY; pvPut(camcom_status);
            pvGet(in_buff_len); pvGet(in_buff);
            pvGet(camcom_reservation);  /* Just for debug?? */
%%          memcpy((void *)&real_buff[0],(void *)&in_buff[0],2*in_buff_len);
            pvPut(real_buff, SYNC); /* Start Camac operation */
            pvGet(real_buff, SYNC); /* Get results */
%%          memcpy((void *)&in_buff[0],(void *)&real_buff[0],2*in_buff_len);
            pvPut(in_buff, SYNC);    /* Put results back to in_buff */
            camcom_status=CAMCOM_DONE; pvPut(camcom_status);
            last_active_token=-1;
        } state process
    }

}




