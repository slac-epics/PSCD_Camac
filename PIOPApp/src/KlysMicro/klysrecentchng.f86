      INTEGER*4 FUNCTION KLYSRECENTCHNG(SECN_DB,
     1  VALUE_WAS_CHANGED)

C     **MEMBER**=SLCRMX:KLYSLIB
C
C====================================================================
C
C Abs:  This routine determines whether the value of a specified
C       secondary has changed recently for the current unit being
C       processed.
C
C Name: KLYSRECENTCHNG
C
C Args: SECN_DB               A subset of the database secondary
C         Use:  integer       parameter values defined in KLYSDEF.INC.
C         Type: longword      This integer identifies the desired
C         Acc:  read-only     secondary and may be used in retrieving
C         Mech: reference     the current value from the database.
C                             If this value is KDB_MSTR, the upstream
C                             phase source identified by the MSTR
C                             secondary value for the current unit
C                             will be checked whether it has changed
C                             recently.  If SECN_DB is one of the
C                             other allowed database secondary
C                             identifiers, this secondary value for
C                             the current unit will be checked to
C                             determine whether it has changed
C                             recently.
C
C       VALUE_WAS_CHANGED     A flag indicating whether the
C         Use:  logical       desired database value has changed
C         Type: logical*1     recently.
C         Acc:  read & write
C         Mech: reference
C
C Rem:  This function checks to make sure that the specified database
C       secondary parameter value is one of those for which processing
C       is allowed.  If the indicated secondary is MSTR, this
C       previously retrieved secondary value for the current unit
C       is used to identify the primary, unit, and secondary of the
C       upstream phase source (e.g., SBST 0001 PDES).  This upstream
C       phase source is checked as to whether it has changed
C       recently.  If the indicated secondary is something other
C       than MSTR, this secondary value for the current primary and
C       unit being processed is checked as to whether it has
C       changed recently.
C
C       The time period that determines whether a value has changed
C       recently varies with the specified database secondary
C       parameter value and is defined in a table.
C
C       Currently, only R*4 database secondaries may be added to
C       the list of allowed secondaries.  Adding new secondaries
C       may be done by increasing the value of parameter N_SECN
C       and adding to the data statement entries for arrays
C       SECN and MAX_WAIT_TIME.
C
C Side: None
C
C Ret:  If successful, I*4 KLYS_OKOK.  If the specified database
C       secondary parameter value is not valid, KLYS_BAD_POINTER
C       is returned.  Otherwise, an error code returned by database
C       routines DBLIST and DBLGET.
C
C Auth: 03-JUN-1990, R. Hall (RDH)
C Rev:  05-JUN-1990, D.R. Ohman (DRO)
C
C----------------------------------------------------------------------
C
C Mod:
C
C======================================================================
      IMPLICIT INTEGER*2 (A-Z)

$ LIST
$        INCLUDE (SLCRMXI:KLYSDEF.INC)
$ LIST
$        INCLUDE (SLCRMXI:KDBDEF.INC)
$ LIST
$        INCLUDE (SLCRMXI:KLYSUNITS.INC)
$ LIST
$        INCLUDE (SLCRMXI:KLYSDBUFF.INC)
$ LIST
$        INCLUDE (SLCRMXI:KLYSDATA.INC)

C*****arguments
C
      INTEGER*4 SECN_DB
      LOGICAL*1 VALUE_WAS_CHANGED

C*****parameters
C
C     the number of allowed input database secondary parameter values
C
      INTEGER*2  N_SECN
      PARAMETER (N_SECN = 2)
C
C     the size of each element of the array SECN
C
      INTEGER*2  ELSIZ
      PARAMETER (ELSIZ = 4)
C
C     the number of possible secondary-unit combinations
C
      INTEGER*2  N_SECN_UNIT
      PARAMETER (N_SECN_UNIT = N_SECN * MAX_UNITS)
C
C     the PHAS primary parameter needed by database routines
C
      INTEGER*4  PHASE_PRIM_DB
      PARAMETER (PHASE_PRIM_DB = 30)

C*****local variables and arrays
C
C     array of allowed database secondary parameter values
C
      INTEGER*4 SECN(N_SECN)
C
C     return status
C
      INTEGER*4 KRC_ISS
C
C     primary name
C
      INTEGER*4 APRIM
C
C     PHAS secondary identifier
C
      INTEGER*4 PHAS
C
C     unit number
C
      INTEGER*4 AUNIT
C
C     secondary name
C
      INTEGER*4 ASECN
C
C     PDES secondary identifier
C
      INTEGER*4 PDES
C
C     VDES identifier
C
      INTEGER*4 VDES

C
C     secondary array index
C
      INTEGER*2 SECN_INDEX
C
C     DBLIST database pointer structure
C
      INTEGER*2 KRC_CLIST(4, N_SECN, MAX_UNITS)
C
C     DBLGET database structure for retrieving a R*4 secondary value
C
      INTEGER*2 KRC_SLIST(4)

C
C     Flags indicating whether intialization has been done for each
C     secondary-unit pair
C
      LOGICAL*1 INIT_DONE(N_SECN, MAX_UNITS)

C
C     function return logical status
C
      LOGICAL KRC_ILL

C
C     database R*4 secondary value
C
      REAL*4 R4_DB_VALUE
C
C     array of old values for each secondary-unit pair
C
      REAL*4 OLD_VALUE(N_SECN, MAX_UNITS)
C
C     new database secondary value
C
      REAL*4 NEW_VALUE

C
C     array containing the time the secondary value last changed for
C     each secondary-unit pair
C
      REAL*8 TIME_OF_CHANGE(N_SECN, MAX_UNITS)
C
C     the current time (the number of seconds since 17-NOV-1858).
C
      REAL*8 CUR_TIME
C
C     the elapsed number of seconds over which a secondary change
C     is no longer considered to be recent.  This amount of time
C     may vary with the particular secondary.
C
      REAL*8 MAX_WAIT_TIME(N_SECN)

C*****functions used
C
      REAL*4 R_TIME
      INTEGER*2 FIND_INDEX
      INTEGER*4 DBLIST, DBLGET
                    
      DATA PHAS /4HPHAS/
      DATA PDES /4HPDES/
      DATA VDES /4HVDES/
      DATA SECN          /KDB_KPHR,      KDB_MSTR /
      DATA MAX_WAIT_TIME /20.0D0,        20.0D0/
      DATA KRC_SLIST /4, 0, 0, 0/
      DATA INIT_DONE /N_SECN_UNIT * .FALSE./

      EQUIVALENCE (KRC_ISS, KRC_ILL)
      EQUIVALENCE (R4_DB_VALUE, KRC_SLIST(3))
C
C*****logic begins
C
      KRC_ISS = KLYS_OKOK

C
C     Get the array index for the specified database secondary
C     parameter.  If this input parameter is not one of the ones
C     allowed, return an error code.
C
      SECN_INDEX = FIND_INDEX(SECN, ELSIZ, N_SECN, SECN_DB)
      IF (SECN_INDEX .EQ. 0) THEN
         KRC_ISS = KLYS_BAD_POINTER
         GO TO 9999
      END IF

C
C     If not done previously for the current secondary-unit pair,
C     initialize the database list pointer and the old value.
C
      IF (.NOT. INIT_DONE(SECN_INDEX, KSD_ENTRY) ) THEN

         IF (SECN_DB .EQ. KDB_MSTR) THEN
C
C           The primary, unit, and secondary to be checked whether
C           it has changed recently will be determined from the
C           previously retrieved MSTR secondary array values
C           (which contains the upstream phase source).  The
C           logic for the possible primary and secondary values
C           was modeled on similar logic in GOLDMSTR.F86.
C
            IF (KSD_MSTR(1, KSD_ENTRY) .EQ. NONE) THEN
               GO TO 9999
            END IF

            IF (KSD_MSTR(1, KSD_ENTRY) .EQ. KLYS) THEN
               APRIM = KDB_KLYS
            ELSEIF (KSD_MSTR(1, KSD_ENTRY) .EQ. PHAS) THEN
               APRIM = PHASE_PRIM_DB
            ELSE
               APRIM = KDB_SBST
            END IF

            AUNIT = KSD_MSTR(2, KSD_ENTRY)

            IF (KSD_MSTR(3, KSD_ENTRY) .EQ. PDES) THEN
               ASECN = KDB_PDES
            ELSEIF (KSD_MSTR(3, KSD_ENTRY) .EQ. VDES) THEN
               ASECN = KDB_AMET
            ELSE
               ASECN = KDB_PHAS
            END IF

         ELSE
C
C           The primary, unit, and secondary to be checked whether
C           it has changed recently will be the current primary,
C           the current unit, and the specified secondary.
C
            APRIM = PRIMARY
            AUNIT = UNIT
            ASECN = SECN_DB
         END IF

C
C        Set up the database pointer structure for the value to
C        be checked whether it has changed recently.  Then initialize
C        the old value.
C
         KRC_CLIST(1, SECN_INDEX, KSD_ENTRY) = 4
         KRC_CLIST(2, SECN_INDEX, KSD_ENTRY) = 0
         KRC_ISS = DBLIST(KRC_CLIST(1, SECN_INDEX, KSD_ENTRY), APRIM,
     1      0, AUNIT, ASECN)
         IF (.NOT. KRC_ILL) THEN
            GO TO 9999
         END IF

         KRC_SLIST(2) = 0
         KRC_ISS = DBLGET(KRC_SLIST, KRC_CLIST(1, SECN_INDEX,
     1      KSD_ENTRY) )
         IF (.NOT. KRC_ILL) THEN
            GO TO 9999
         END IF

         OLD_VALUE(SECN_INDEX, KSD_ENTRY) = R4_DB_VALUE

         INIT_DONE(SECN_INDEX, KSD_ENTRY) = .TRUE.

      ELSE
C
C        Get the new secondary value and check whether it has
C        changed from the old value.
C
         KRC_SLIST(2) = 0
         KRC_ISS = DBLGET(KRC_SLIST, KRC_CLIST(1, SECN_INDEX,
     1      KSD_ENTRY) )
         IF (.NOT. KRC_ILL) THEN
            GO TO 9999
         END IF

         NEW_VALUE = R4_DB_VALUE
         IF (NEW_VALUE .NE. OLD_VALUE(SECN_INDEX, KSD_ENTRY) ) THEN
            VALUE_WAS_CHANGED = .TRUE.
            TIME_OF_CHANGE(SECN_INDEX, KSD_ENTRY) = R_TIME( )
            OLD_VALUE(SECN_INDEX, KSD_ENTRY) = NEW_VALUE
         ELSE
C
C           The new secondary value is the same as the old value.
C           If previously the value was considered to have changed
C           recently, check whether a long enough period of time
C           has elapsed from the time the value last changed for
C           it to be considered to have not changed recently.
C
            IF (VALUE_WAS_CHANGED) THEN
               CUR_TIME = R_TIME( )
               IF ( (CUR_TIME - TIME_OF_CHANGE(SECN_INDEX,
     1            KSD_ENTRY) ) .GT. MAX_WAIT_TIME(SECN_INDEX) ) THEN
                  VALUE_WAS_CHANGED = .FALSE.
                  TIME_OF_CHANGE(SECN_INDEX, KSD_ENTRY) = CUR_TIME
               END IF
            END IF
         END IF
      END IF

9999  CONTINUE

      KLYSRECENTCHNG = KRC_ISS

      RETURN

      END
                                                                                                                                                                                                                                                                                                                                                                                                 